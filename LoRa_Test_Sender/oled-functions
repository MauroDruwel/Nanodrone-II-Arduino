// =========================================================
//                      Oled functions
// =========================================================

/**
 * Show the text string at the desired coordinates.
 * 
 * The text is shown according to the current settings (color, font, etc.)
 * 
 * \param text The string of text to display
 * \param x The x cursor coordinates
 * \param y The y cursor coordinates
 * \param color The color of the text
 * \param disp Pointer to the Oled display class
 */
void showText(char* text, int x, int y, int color, Adafruit_SSD1306* disp) {
  // Set the desired color
  switch(color) {
    case COL_WHITE:
    oled.setTextColor(SSD1306_WHITE);
    break;
  }
  disp->setCursor(x, y);
  disp->print(text);
  disp->display();
}

/**
 * Initialize the display before showing a new screen.
 * 
 * \note This method should be called for first before setting a new
 * string or when the screen setting changes.
 * 
 * \param disp Pointer to the Oled display class
 */
void initDisplay(Adafruit_SSD1306* disp) {
  disp->clearDisplay();
  disp->display();
}

/**
 * Set the desired font and size to the text.
 * 
 * \param fontName One of the following font families:\n
 * \param fontSize The size in point of the font chosen between one of the
 * following values: 9, 12, 18, 24
 * \param disp Pointer to the Oled display class
 * 
 * \return 0 if the font is set else return -1
 */
int textFont(int fontName, int fontSize, Adafruit_SSD1306* disp) {
  int j;

  // Check for the font size
  if( (fontSize != 9) && (fontSize != 12) &&
      (fontSize != 18) &&(fontSize != 24) ) {
        return -1;
      }

  // Switch the font family
  switch(fontName) {
    case MONO:
    #ifndef FREE_MONO
    disp->setFont();
    return -1;
    #else
    switch(fontSize) {
      case 9:
        disp->setFont(&FreeMono9pt7b);
      break;
      case 12:
        disp->setFont(&FreeMono12pt7b);
      break;
      case 18:
        disp->setFont(&FreeMono18pt7b);
      break;
      case 24:
        disp->setFont(&FreeMono24pt7b);
      break;
    }
    #endif
    break;

    case MONO_BOLD:
    #ifndef FREE_MONO_BOLD
    disp->setFont();
    return -1;
    #else
    switch(fontSize) {
      case 9:
        disp->setFont(&FreeMonoBold9pt7b);
      break;
      case 12:
        disp->setFont(&FreeMonoBold12pt7b);
      break;
      case 18:
        disp->setFont(&FreeMonoBold18pt7b);
      break;
      case 24:
        disp->setFont(&FreeMonoBold24pt7b);
      break;
    }
    #endif
    break;

    case MONO_OBLIQUE:
    #ifndef FREE_MONO_OBLIQUE
    disp->setFont();
    return -1;
    #else
    switch(fontSize) {
      case 9:
        disp->setFont(&FreeMonoOblique9pt7b);
      break;
      case 12:
        disp->setFont(&FreeMonoOblique12pt7b);
      break;
      case 18:
        disp->setFont(&FreeMonoOblique18pt7b);
      break;
      case 24:
        disp->setFont(&FreeMonoOblique24pt7b);
      break;
    }
    #endif
    break;

    case MONO_BOLD_OBLIQUE:
    #ifndef FREE_MONO_BOLD_OBLIQUE
    disp->setFont();
    return -1;
    #else
    switch(fontSize) {
      case 9:
        disp->setFont(&FreeMonoBoldOblique9pt7b);
      break;
      case 12:
        disp->setFont(&FreeMonoBoldOblique12pt7b);
      break;
      case 18:
        disp->setFont(&FreeMonoBoldOblique18pt7b);
      break;
      case 24:
        disp->setFont(&FreeMonoBoldOblique24pt7b);
      break;
    }
    #endif
    break;
  } 
}